// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common/options.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GrpcServer {

  /// <summary>Holder for reflection information generated from common/options.proto</summary>
  public static partial class OptionsReflection {

    #region Descriptor
    /// <summary>File descriptor for common/options.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRjb21tb24vb3B0aW9ucy5wcm90bxIPdHlwZWRiLnByb3RvY29sIrkDCgdP",
            "cHRpb25zEg8KBWluZmVyGAEgASgISAASGQoPdHJhY2VfaW5mZXJlbmNlGAIg",
            "ASgISAESEQoHZXhwbGFpbhgDIAEoCEgCEhIKCHBhcmFsbGVsGAQgASgISAMS",
            "FwoNcHJlZmV0Y2hfc2l6ZRgFIAEoBUgEEhIKCHByZWZldGNoGAYgASgISAUS",
            "JQobc2Vzc2lvbl9pZGxlX3RpbWVvdXRfbWlsbGlzGAcgASgFSAYSLAoic2No",
            "ZW1hX2xvY2tfYWNxdWlyZV90aW1lb3V0X21pbGxpcxgIIAEoBUgHEhoKEHJl",
            "YWRfYW55X3JlcGxpY2EYCSABKAhICEILCglpbmZlcl9vcHRCFQoTdHJhY2Vf",
            "aW5mZXJlbmNlX29wdEINCgtleHBsYWluX29wdEIOCgxwYXJhbGxlbF9vcHRC",
            "EwoRcHJlZmV0Y2hfc2l6ZV9vcHRCDgoMcHJlZmV0Y2hfb3B0QhoKGHNlc3Np",
            "b25faWRsZV90aW1lb3V0X29wdEIhCh9zY2hlbWFfbG9ja19hY3F1aXJlX3Rp",
            "bWVvdXRfb3B0QhYKFHJlYWRfYW55X3JlcGxpY2Ffb3B0QjgKG2NvbS52YXRp",
            "Y2xlLnR5cGVkYi5wcm90b2NvbEIMT3B0aW9uc1Byb3RvqgIKR3JwY1NlcnZl",
            "cmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcServer.Options), global::GrpcServer.Options.Parser, new[]{ "Infer", "TraceInference", "Explain", "Parallel", "PrefetchSize", "Prefetch", "SessionIdleTimeoutMillis", "SchemaLockAcquireTimeoutMillis", "ReadAnyReplica" }, new[]{ "InferOpt", "TraceInferenceOpt", "ExplainOpt", "ParallelOpt", "PrefetchSizeOpt", "PrefetchOpt", "SessionIdleTimeoutOpt", "SchemaLockAcquireTimeoutOpt", "ReadAnyReplicaOpt" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Options : pb::IMessage<Options>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Options> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcServer.OptionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Options() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Options(Options other) : this() {
      switch (other.InferOptCase) {
        case InferOptOneofCase.Infer:
          Infer = other.Infer;
          break;
      }

      switch (other.TraceInferenceOptCase) {
        case TraceInferenceOptOneofCase.TraceInference:
          TraceInference = other.TraceInference;
          break;
      }

      switch (other.ExplainOptCase) {
        case ExplainOptOneofCase.Explain:
          Explain = other.Explain;
          break;
      }

      switch (other.ParallelOptCase) {
        case ParallelOptOneofCase.Parallel:
          Parallel = other.Parallel;
          break;
      }

      switch (other.PrefetchSizeOptCase) {
        case PrefetchSizeOptOneofCase.PrefetchSize:
          PrefetchSize = other.PrefetchSize;
          break;
      }

      switch (other.PrefetchOptCase) {
        case PrefetchOptOneofCase.Prefetch:
          Prefetch = other.Prefetch;
          break;
      }

      switch (other.SessionIdleTimeoutOptCase) {
        case SessionIdleTimeoutOptOneofCase.SessionIdleTimeoutMillis:
          SessionIdleTimeoutMillis = other.SessionIdleTimeoutMillis;
          break;
      }

      switch (other.SchemaLockAcquireTimeoutOptCase) {
        case SchemaLockAcquireTimeoutOptOneofCase.SchemaLockAcquireTimeoutMillis:
          SchemaLockAcquireTimeoutMillis = other.SchemaLockAcquireTimeoutMillis;
          break;
      }

      switch (other.ReadAnyReplicaOptCase) {
        case ReadAnyReplicaOptOneofCase.ReadAnyReplica:
          ReadAnyReplica = other.ReadAnyReplica;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Options Clone() {
      return new Options(this);
    }

    /// <summary>Field number for the "infer" field.</summary>
    public const int InferFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Infer {
      get { return inferOptCase_ == InferOptOneofCase.Infer ? (bool) inferOpt_ : false; }
      set {
        inferOpt_ = value;
        inferOptCase_ = InferOptOneofCase.Infer;
      }
    }

    /// <summary>Field number for the "trace_inference" field.</summary>
    public const int TraceInferenceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TraceInference {
      get { return traceInferenceOptCase_ == TraceInferenceOptOneofCase.TraceInference ? (bool) traceInferenceOpt_ : false; }
      set {
        traceInferenceOpt_ = value;
        traceInferenceOptCase_ = TraceInferenceOptOneofCase.TraceInference;
      }
    }

    /// <summary>Field number for the "explain" field.</summary>
    public const int ExplainFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Explain {
      get { return explainOptCase_ == ExplainOptOneofCase.Explain ? (bool) explainOpt_ : false; }
      set {
        explainOpt_ = value;
        explainOptCase_ = ExplainOptOneofCase.Explain;
      }
    }

    /// <summary>Field number for the "parallel" field.</summary>
    public const int ParallelFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Parallel {
      get { return parallelOptCase_ == ParallelOptOneofCase.Parallel ? (bool) parallelOpt_ : false; }
      set {
        parallelOpt_ = value;
        parallelOptCase_ = ParallelOptOneofCase.Parallel;
      }
    }

    /// <summary>Field number for the "prefetch_size" field.</summary>
    public const int PrefetchSizeFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrefetchSize {
      get { return prefetchSizeOptCase_ == PrefetchSizeOptOneofCase.PrefetchSize ? (int) prefetchSizeOpt_ : 0; }
      set {
        prefetchSizeOpt_ = value;
        prefetchSizeOptCase_ = PrefetchSizeOptOneofCase.PrefetchSize;
      }
    }

    /// <summary>Field number for the "prefetch" field.</summary>
    public const int PrefetchFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Prefetch {
      get { return prefetchOptCase_ == PrefetchOptOneofCase.Prefetch ? (bool) prefetchOpt_ : false; }
      set {
        prefetchOpt_ = value;
        prefetchOptCase_ = PrefetchOptOneofCase.Prefetch;
      }
    }

    /// <summary>Field number for the "session_idle_timeout_millis" field.</summary>
    public const int SessionIdleTimeoutMillisFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionIdleTimeoutMillis {
      get { return sessionIdleTimeoutOptCase_ == SessionIdleTimeoutOptOneofCase.SessionIdleTimeoutMillis ? (int) sessionIdleTimeoutOpt_ : 0; }
      set {
        sessionIdleTimeoutOpt_ = value;
        sessionIdleTimeoutOptCase_ = SessionIdleTimeoutOptOneofCase.SessionIdleTimeoutMillis;
      }
    }

    /// <summary>Field number for the "schema_lock_acquire_timeout_millis" field.</summary>
    public const int SchemaLockAcquireTimeoutMillisFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SchemaLockAcquireTimeoutMillis {
      get { return schemaLockAcquireTimeoutOptCase_ == SchemaLockAcquireTimeoutOptOneofCase.SchemaLockAcquireTimeoutMillis ? (int) schemaLockAcquireTimeoutOpt_ : 0; }
      set {
        schemaLockAcquireTimeoutOpt_ = value;
        schemaLockAcquireTimeoutOptCase_ = SchemaLockAcquireTimeoutOptOneofCase.SchemaLockAcquireTimeoutMillis;
      }
    }

    /// <summary>Field number for the "read_any_replica" field.</summary>
    public const int ReadAnyReplicaFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReadAnyReplica {
      get { return readAnyReplicaOptCase_ == ReadAnyReplicaOptOneofCase.ReadAnyReplica ? (bool) readAnyReplicaOpt_ : false; }
      set {
        readAnyReplicaOpt_ = value;
        readAnyReplicaOptCase_ = ReadAnyReplicaOptOneofCase.ReadAnyReplica;
      }
    }

    private object inferOpt_;
    /// <summary>Enum of possible cases for the "infer_opt" oneof.</summary>
    public enum InferOptOneofCase {
      None = 0,
      Infer = 1,
    }
    private InferOptOneofCase inferOptCase_ = InferOptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferOptOneofCase InferOptCase {
      get { return inferOptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInferOpt() {
      inferOptCase_ = InferOptOneofCase.None;
      inferOpt_ = null;
    }

    private object traceInferenceOpt_;
    /// <summary>Enum of possible cases for the "trace_inference_opt" oneof.</summary>
    public enum TraceInferenceOptOneofCase {
      None = 0,
      TraceInference = 2,
    }
    private TraceInferenceOptOneofCase traceInferenceOptCase_ = TraceInferenceOptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceInferenceOptOneofCase TraceInferenceOptCase {
      get { return traceInferenceOptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTraceInferenceOpt() {
      traceInferenceOptCase_ = TraceInferenceOptOneofCase.None;
      traceInferenceOpt_ = null;
    }

    private object explainOpt_;
    /// <summary>Enum of possible cases for the "explain_opt" oneof.</summary>
    public enum ExplainOptOneofCase {
      None = 0,
      Explain = 3,
    }
    private ExplainOptOneofCase explainOptCase_ = ExplainOptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplainOptOneofCase ExplainOptCase {
      get { return explainOptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExplainOpt() {
      explainOptCase_ = ExplainOptOneofCase.None;
      explainOpt_ = null;
    }

    private object parallelOpt_;
    /// <summary>Enum of possible cases for the "parallel_opt" oneof.</summary>
    public enum ParallelOptOneofCase {
      None = 0,
      Parallel = 4,
    }
    private ParallelOptOneofCase parallelOptCase_ = ParallelOptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParallelOptOneofCase ParallelOptCase {
      get { return parallelOptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParallelOpt() {
      parallelOptCase_ = ParallelOptOneofCase.None;
      parallelOpt_ = null;
    }

    private object prefetchSizeOpt_;
    /// <summary>Enum of possible cases for the "prefetch_size_opt" oneof.</summary>
    public enum PrefetchSizeOptOneofCase {
      None = 0,
      PrefetchSize = 5,
    }
    private PrefetchSizeOptOneofCase prefetchSizeOptCase_ = PrefetchSizeOptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefetchSizeOptOneofCase PrefetchSizeOptCase {
      get { return prefetchSizeOptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrefetchSizeOpt() {
      prefetchSizeOptCase_ = PrefetchSizeOptOneofCase.None;
      prefetchSizeOpt_ = null;
    }

    private object prefetchOpt_;
    /// <summary>Enum of possible cases for the "prefetch_opt" oneof.</summary>
    public enum PrefetchOptOneofCase {
      None = 0,
      Prefetch = 6,
    }
    private PrefetchOptOneofCase prefetchOptCase_ = PrefetchOptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefetchOptOneofCase PrefetchOptCase {
      get { return prefetchOptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrefetchOpt() {
      prefetchOptCase_ = PrefetchOptOneofCase.None;
      prefetchOpt_ = null;
    }

    private object sessionIdleTimeoutOpt_;
    /// <summary>Enum of possible cases for the "session_idle_timeout_opt" oneof.</summary>
    public enum SessionIdleTimeoutOptOneofCase {
      None = 0,
      SessionIdleTimeoutMillis = 7,
    }
    private SessionIdleTimeoutOptOneofCase sessionIdleTimeoutOptCase_ = SessionIdleTimeoutOptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionIdleTimeoutOptOneofCase SessionIdleTimeoutOptCase {
      get { return sessionIdleTimeoutOptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSessionIdleTimeoutOpt() {
      sessionIdleTimeoutOptCase_ = SessionIdleTimeoutOptOneofCase.None;
      sessionIdleTimeoutOpt_ = null;
    }

    private object schemaLockAcquireTimeoutOpt_;
    /// <summary>Enum of possible cases for the "schema_lock_acquire_timeout_opt" oneof.</summary>
    public enum SchemaLockAcquireTimeoutOptOneofCase {
      None = 0,
      SchemaLockAcquireTimeoutMillis = 8,
    }
    private SchemaLockAcquireTimeoutOptOneofCase schemaLockAcquireTimeoutOptCase_ = SchemaLockAcquireTimeoutOptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemaLockAcquireTimeoutOptOneofCase SchemaLockAcquireTimeoutOptCase {
      get { return schemaLockAcquireTimeoutOptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchemaLockAcquireTimeoutOpt() {
      schemaLockAcquireTimeoutOptCase_ = SchemaLockAcquireTimeoutOptOneofCase.None;
      schemaLockAcquireTimeoutOpt_ = null;
    }

    private object readAnyReplicaOpt_;
    /// <summary>Enum of possible cases for the "read_any_replica_opt" oneof.</summary>
    public enum ReadAnyReplicaOptOneofCase {
      None = 0,
      ReadAnyReplica = 9,
    }
    private ReadAnyReplicaOptOneofCase readAnyReplicaOptCase_ = ReadAnyReplicaOptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadAnyReplicaOptOneofCase ReadAnyReplicaOptCase {
      get { return readAnyReplicaOptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReadAnyReplicaOpt() {
      readAnyReplicaOptCase_ = ReadAnyReplicaOptOneofCase.None;
      readAnyReplicaOpt_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Options);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Options other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Infer != other.Infer) return false;
      if (TraceInference != other.TraceInference) return false;
      if (Explain != other.Explain) return false;
      if (Parallel != other.Parallel) return false;
      if (PrefetchSize != other.PrefetchSize) return false;
      if (Prefetch != other.Prefetch) return false;
      if (SessionIdleTimeoutMillis != other.SessionIdleTimeoutMillis) return false;
      if (SchemaLockAcquireTimeoutMillis != other.SchemaLockAcquireTimeoutMillis) return false;
      if (ReadAnyReplica != other.ReadAnyReplica) return false;
      if (InferOptCase != other.InferOptCase) return false;
      if (TraceInferenceOptCase != other.TraceInferenceOptCase) return false;
      if (ExplainOptCase != other.ExplainOptCase) return false;
      if (ParallelOptCase != other.ParallelOptCase) return false;
      if (PrefetchSizeOptCase != other.PrefetchSizeOptCase) return false;
      if (PrefetchOptCase != other.PrefetchOptCase) return false;
      if (SessionIdleTimeoutOptCase != other.SessionIdleTimeoutOptCase) return false;
      if (SchemaLockAcquireTimeoutOptCase != other.SchemaLockAcquireTimeoutOptCase) return false;
      if (ReadAnyReplicaOptCase != other.ReadAnyReplicaOptCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inferOptCase_ == InferOptOneofCase.Infer) hash ^= Infer.GetHashCode();
      if (traceInferenceOptCase_ == TraceInferenceOptOneofCase.TraceInference) hash ^= TraceInference.GetHashCode();
      if (explainOptCase_ == ExplainOptOneofCase.Explain) hash ^= Explain.GetHashCode();
      if (parallelOptCase_ == ParallelOptOneofCase.Parallel) hash ^= Parallel.GetHashCode();
      if (prefetchSizeOptCase_ == PrefetchSizeOptOneofCase.PrefetchSize) hash ^= PrefetchSize.GetHashCode();
      if (prefetchOptCase_ == PrefetchOptOneofCase.Prefetch) hash ^= Prefetch.GetHashCode();
      if (sessionIdleTimeoutOptCase_ == SessionIdleTimeoutOptOneofCase.SessionIdleTimeoutMillis) hash ^= SessionIdleTimeoutMillis.GetHashCode();
      if (schemaLockAcquireTimeoutOptCase_ == SchemaLockAcquireTimeoutOptOneofCase.SchemaLockAcquireTimeoutMillis) hash ^= SchemaLockAcquireTimeoutMillis.GetHashCode();
      if (readAnyReplicaOptCase_ == ReadAnyReplicaOptOneofCase.ReadAnyReplica) hash ^= ReadAnyReplica.GetHashCode();
      hash ^= (int) inferOptCase_;
      hash ^= (int) traceInferenceOptCase_;
      hash ^= (int) explainOptCase_;
      hash ^= (int) parallelOptCase_;
      hash ^= (int) prefetchSizeOptCase_;
      hash ^= (int) prefetchOptCase_;
      hash ^= (int) sessionIdleTimeoutOptCase_;
      hash ^= (int) schemaLockAcquireTimeoutOptCase_;
      hash ^= (int) readAnyReplicaOptCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (inferOptCase_ == InferOptOneofCase.Infer) {
        output.WriteRawTag(8);
        output.WriteBool(Infer);
      }
      if (traceInferenceOptCase_ == TraceInferenceOptOneofCase.TraceInference) {
        output.WriteRawTag(16);
        output.WriteBool(TraceInference);
      }
      if (explainOptCase_ == ExplainOptOneofCase.Explain) {
        output.WriteRawTag(24);
        output.WriteBool(Explain);
      }
      if (parallelOptCase_ == ParallelOptOneofCase.Parallel) {
        output.WriteRawTag(32);
        output.WriteBool(Parallel);
      }
      if (prefetchSizeOptCase_ == PrefetchSizeOptOneofCase.PrefetchSize) {
        output.WriteRawTag(40);
        output.WriteInt32(PrefetchSize);
      }
      if (prefetchOptCase_ == PrefetchOptOneofCase.Prefetch) {
        output.WriteRawTag(48);
        output.WriteBool(Prefetch);
      }
      if (sessionIdleTimeoutOptCase_ == SessionIdleTimeoutOptOneofCase.SessionIdleTimeoutMillis) {
        output.WriteRawTag(56);
        output.WriteInt32(SessionIdleTimeoutMillis);
      }
      if (schemaLockAcquireTimeoutOptCase_ == SchemaLockAcquireTimeoutOptOneofCase.SchemaLockAcquireTimeoutMillis) {
        output.WriteRawTag(64);
        output.WriteInt32(SchemaLockAcquireTimeoutMillis);
      }
      if (readAnyReplicaOptCase_ == ReadAnyReplicaOptOneofCase.ReadAnyReplica) {
        output.WriteRawTag(72);
        output.WriteBool(ReadAnyReplica);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (inferOptCase_ == InferOptOneofCase.Infer) {
        output.WriteRawTag(8);
        output.WriteBool(Infer);
      }
      if (traceInferenceOptCase_ == TraceInferenceOptOneofCase.TraceInference) {
        output.WriteRawTag(16);
        output.WriteBool(TraceInference);
      }
      if (explainOptCase_ == ExplainOptOneofCase.Explain) {
        output.WriteRawTag(24);
        output.WriteBool(Explain);
      }
      if (parallelOptCase_ == ParallelOptOneofCase.Parallel) {
        output.WriteRawTag(32);
        output.WriteBool(Parallel);
      }
      if (prefetchSizeOptCase_ == PrefetchSizeOptOneofCase.PrefetchSize) {
        output.WriteRawTag(40);
        output.WriteInt32(PrefetchSize);
      }
      if (prefetchOptCase_ == PrefetchOptOneofCase.Prefetch) {
        output.WriteRawTag(48);
        output.WriteBool(Prefetch);
      }
      if (sessionIdleTimeoutOptCase_ == SessionIdleTimeoutOptOneofCase.SessionIdleTimeoutMillis) {
        output.WriteRawTag(56);
        output.WriteInt32(SessionIdleTimeoutMillis);
      }
      if (schemaLockAcquireTimeoutOptCase_ == SchemaLockAcquireTimeoutOptOneofCase.SchemaLockAcquireTimeoutMillis) {
        output.WriteRawTag(64);
        output.WriteInt32(SchemaLockAcquireTimeoutMillis);
      }
      if (readAnyReplicaOptCase_ == ReadAnyReplicaOptOneofCase.ReadAnyReplica) {
        output.WriteRawTag(72);
        output.WriteBool(ReadAnyReplica);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inferOptCase_ == InferOptOneofCase.Infer) {
        size += 1 + 1;
      }
      if (traceInferenceOptCase_ == TraceInferenceOptOneofCase.TraceInference) {
        size += 1 + 1;
      }
      if (explainOptCase_ == ExplainOptOneofCase.Explain) {
        size += 1 + 1;
      }
      if (parallelOptCase_ == ParallelOptOneofCase.Parallel) {
        size += 1 + 1;
      }
      if (prefetchSizeOptCase_ == PrefetchSizeOptOneofCase.PrefetchSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrefetchSize);
      }
      if (prefetchOptCase_ == PrefetchOptOneofCase.Prefetch) {
        size += 1 + 1;
      }
      if (sessionIdleTimeoutOptCase_ == SessionIdleTimeoutOptOneofCase.SessionIdleTimeoutMillis) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionIdleTimeoutMillis);
      }
      if (schemaLockAcquireTimeoutOptCase_ == SchemaLockAcquireTimeoutOptOneofCase.SchemaLockAcquireTimeoutMillis) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SchemaLockAcquireTimeoutMillis);
      }
      if (readAnyReplicaOptCase_ == ReadAnyReplicaOptOneofCase.ReadAnyReplica) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Options other) {
      if (other == null) {
        return;
      }
      switch (other.InferOptCase) {
        case InferOptOneofCase.Infer:
          Infer = other.Infer;
          break;
      }

      switch (other.TraceInferenceOptCase) {
        case TraceInferenceOptOneofCase.TraceInference:
          TraceInference = other.TraceInference;
          break;
      }

      switch (other.ExplainOptCase) {
        case ExplainOptOneofCase.Explain:
          Explain = other.Explain;
          break;
      }

      switch (other.ParallelOptCase) {
        case ParallelOptOneofCase.Parallel:
          Parallel = other.Parallel;
          break;
      }

      switch (other.PrefetchSizeOptCase) {
        case PrefetchSizeOptOneofCase.PrefetchSize:
          PrefetchSize = other.PrefetchSize;
          break;
      }

      switch (other.PrefetchOptCase) {
        case PrefetchOptOneofCase.Prefetch:
          Prefetch = other.Prefetch;
          break;
      }

      switch (other.SessionIdleTimeoutOptCase) {
        case SessionIdleTimeoutOptOneofCase.SessionIdleTimeoutMillis:
          SessionIdleTimeoutMillis = other.SessionIdleTimeoutMillis;
          break;
      }

      switch (other.SchemaLockAcquireTimeoutOptCase) {
        case SchemaLockAcquireTimeoutOptOneofCase.SchemaLockAcquireTimeoutMillis:
          SchemaLockAcquireTimeoutMillis = other.SchemaLockAcquireTimeoutMillis;
          break;
      }

      switch (other.ReadAnyReplicaOptCase) {
        case ReadAnyReplicaOptOneofCase.ReadAnyReplica:
          ReadAnyReplica = other.ReadAnyReplica;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Infer = input.ReadBool();
            break;
          }
          case 16: {
            TraceInference = input.ReadBool();
            break;
          }
          case 24: {
            Explain = input.ReadBool();
            break;
          }
          case 32: {
            Parallel = input.ReadBool();
            break;
          }
          case 40: {
            PrefetchSize = input.ReadInt32();
            break;
          }
          case 48: {
            Prefetch = input.ReadBool();
            break;
          }
          case 56: {
            SessionIdleTimeoutMillis = input.ReadInt32();
            break;
          }
          case 64: {
            SchemaLockAcquireTimeoutMillis = input.ReadInt32();
            break;
          }
          case 72: {
            ReadAnyReplica = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Infer = input.ReadBool();
            break;
          }
          case 16: {
            TraceInference = input.ReadBool();
            break;
          }
          case 24: {
            Explain = input.ReadBool();
            break;
          }
          case 32: {
            Parallel = input.ReadBool();
            break;
          }
          case 40: {
            PrefetchSize = input.ReadInt32();
            break;
          }
          case 48: {
            Prefetch = input.ReadBool();
            break;
          }
          case 56: {
            SessionIdleTimeoutMillis = input.ReadInt32();
            break;
          }
          case 64: {
            SchemaLockAcquireTimeoutMillis = input.ReadInt32();
            break;
          }
          case 72: {
            ReadAnyReplica = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
