// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: core/core_service.proto
// </auto-generated>
// Original file comments:
//
// Copyright (C) 2021 Vaticle
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcServer {
  public static partial class TypeDB
  {
    static readonly string __ServiceName = "typedb.protocol.TypeDB";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Req> __Marshaller_typedb_protocol_CoreDatabaseManager_Contains_Req = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Req.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Res> __Marshaller_typedb_protocol_CoreDatabaseManager_Contains_Res = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Res.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Req> __Marshaller_typedb_protocol_CoreDatabaseManager_Create_Req = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Req.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Res> __Marshaller_typedb_protocol_CoreDatabaseManager_Create_Res = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Res.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabaseManager.Types.All.Types.Req> __Marshaller_typedb_protocol_CoreDatabaseManager_All_Req = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabaseManager.Types.All.Types.Req.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabaseManager.Types.All.Types.Res> __Marshaller_typedb_protocol_CoreDatabaseManager_All_Res = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabaseManager.Types.All.Types.Res.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabase.Types.Schema.Types.Req> __Marshaller_typedb_protocol_CoreDatabase_Schema_Req = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabase.Types.Schema.Types.Req.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabase.Types.Schema.Types.Res> __Marshaller_typedb_protocol_CoreDatabase_Schema_Res = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabase.Types.Schema.Types.Res.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabase.Types.Delete.Types.Req> __Marshaller_typedb_protocol_CoreDatabase_Delete_Req = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabase.Types.Delete.Types.Req.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.CoreDatabase.Types.Delete.Types.Res> __Marshaller_typedb_protocol_CoreDatabase_Delete_Res = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.CoreDatabase.Types.Delete.Types.Res.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.Session.Types.Open.Types.Req> __Marshaller_typedb_protocol_Session_Open_Req = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.Session.Types.Open.Types.Req.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.Session.Types.Open.Types.Res> __Marshaller_typedb_protocol_Session_Open_Res = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.Session.Types.Open.Types.Res.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.Session.Types.Close.Types.Req> __Marshaller_typedb_protocol_Session_Close_Req = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.Session.Types.Close.Types.Req.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.Session.Types.Close.Types.Res> __Marshaller_typedb_protocol_Session_Close_Res = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.Session.Types.Close.Types.Res.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.Session.Types.Pulse.Types.Req> __Marshaller_typedb_protocol_Session_Pulse_Req = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.Session.Types.Pulse.Types.Req.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.Session.Types.Pulse.Types.Res> __Marshaller_typedb_protocol_Session_Pulse_Res = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.Session.Types.Pulse.Types.Res.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.Transaction.Types.Client> __Marshaller_typedb_protocol_Transaction_Client = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.Transaction.Types.Client.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.Transaction.Types.Server> __Marshaller_typedb_protocol_Transaction_Server = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.Transaction.Types.Server.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Req, global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Res> __Method_databases_contains = new grpc::Method<global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Req, global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Res>(
        grpc::MethodType.Unary,
        __ServiceName,
        "databases_contains",
        __Marshaller_typedb_protocol_CoreDatabaseManager_Contains_Req,
        __Marshaller_typedb_protocol_CoreDatabaseManager_Contains_Res);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Req, global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Res> __Method_databases_create = new grpc::Method<global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Req, global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Res>(
        grpc::MethodType.Unary,
        __ServiceName,
        "databases_create",
        __Marshaller_typedb_protocol_CoreDatabaseManager_Create_Req,
        __Marshaller_typedb_protocol_CoreDatabaseManager_Create_Res);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.CoreDatabaseManager.Types.All.Types.Req, global::GrpcServer.CoreDatabaseManager.Types.All.Types.Res> __Method_databases_all = new grpc::Method<global::GrpcServer.CoreDatabaseManager.Types.All.Types.Req, global::GrpcServer.CoreDatabaseManager.Types.All.Types.Res>(
        grpc::MethodType.Unary,
        __ServiceName,
        "databases_all",
        __Marshaller_typedb_protocol_CoreDatabaseManager_All_Req,
        __Marshaller_typedb_protocol_CoreDatabaseManager_All_Res);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.CoreDatabase.Types.Schema.Types.Req, global::GrpcServer.CoreDatabase.Types.Schema.Types.Res> __Method_database_schema = new grpc::Method<global::GrpcServer.CoreDatabase.Types.Schema.Types.Req, global::GrpcServer.CoreDatabase.Types.Schema.Types.Res>(
        grpc::MethodType.Unary,
        __ServiceName,
        "database_schema",
        __Marshaller_typedb_protocol_CoreDatabase_Schema_Req,
        __Marshaller_typedb_protocol_CoreDatabase_Schema_Res);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.CoreDatabase.Types.Delete.Types.Req, global::GrpcServer.CoreDatabase.Types.Delete.Types.Res> __Method_database_delete = new grpc::Method<global::GrpcServer.CoreDatabase.Types.Delete.Types.Req, global::GrpcServer.CoreDatabase.Types.Delete.Types.Res>(
        grpc::MethodType.Unary,
        __ServiceName,
        "database_delete",
        __Marshaller_typedb_protocol_CoreDatabase_Delete_Req,
        __Marshaller_typedb_protocol_CoreDatabase_Delete_Res);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.Session.Types.Open.Types.Req, global::GrpcServer.Session.Types.Open.Types.Res> __Method_session_open = new grpc::Method<global::GrpcServer.Session.Types.Open.Types.Req, global::GrpcServer.Session.Types.Open.Types.Res>(
        grpc::MethodType.Unary,
        __ServiceName,
        "session_open",
        __Marshaller_typedb_protocol_Session_Open_Req,
        __Marshaller_typedb_protocol_Session_Open_Res);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.Session.Types.Close.Types.Req, global::GrpcServer.Session.Types.Close.Types.Res> __Method_session_close = new grpc::Method<global::GrpcServer.Session.Types.Close.Types.Req, global::GrpcServer.Session.Types.Close.Types.Res>(
        grpc::MethodType.Unary,
        __ServiceName,
        "session_close",
        __Marshaller_typedb_protocol_Session_Close_Req,
        __Marshaller_typedb_protocol_Session_Close_Res);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.Session.Types.Pulse.Types.Req, global::GrpcServer.Session.Types.Pulse.Types.Res> __Method_session_pulse = new grpc::Method<global::GrpcServer.Session.Types.Pulse.Types.Req, global::GrpcServer.Session.Types.Pulse.Types.Res>(
        grpc::MethodType.Unary,
        __ServiceName,
        "session_pulse",
        __Marshaller_typedb_protocol_Session_Pulse_Req,
        __Marshaller_typedb_protocol_Session_Pulse_Res);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.Transaction.Types.Client, global::GrpcServer.Transaction.Types.Server> __Method_transaction = new grpc::Method<global::GrpcServer.Transaction.Types.Client, global::GrpcServer.Transaction.Types.Server>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "transaction",
        __Marshaller_typedb_protocol_Transaction_Client,
        __Marshaller_typedb_protocol_Transaction_Server);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcServer.CoreServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for TypeDB</summary>
    public partial class TypeDBClient : grpc::ClientBase<TypeDBClient>
    {
      /// <summary>Creates a new client for TypeDB</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TypeDBClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TypeDB that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TypeDBClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TypeDBClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TypeDBClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Database Manager API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Res databases_contains(global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return databases_contains(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Database Manager API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Res databases_contains(global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_databases_contains, null, options, request);
      }
      /// <summary>
      /// Database Manager API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Res> databases_containsAsync(global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return databases_containsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Database Manager API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Res> databases_containsAsync(global::GrpcServer.CoreDatabaseManager.Types.Contains.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_databases_contains, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Res databases_create(global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return databases_create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Res databases_create(global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_databases_create, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Res> databases_createAsync(global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return databases_createAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Res> databases_createAsync(global::GrpcServer.CoreDatabaseManager.Types.Create.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_databases_create, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabaseManager.Types.All.Types.Res databases_all(global::GrpcServer.CoreDatabaseManager.Types.All.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return databases_all(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabaseManager.Types.All.Types.Res databases_all(global::GrpcServer.CoreDatabaseManager.Types.All.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_databases_all, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabaseManager.Types.All.Types.Res> databases_allAsync(global::GrpcServer.CoreDatabaseManager.Types.All.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return databases_allAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabaseManager.Types.All.Types.Res> databases_allAsync(global::GrpcServer.CoreDatabaseManager.Types.All.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_databases_all, null, options, request);
      }
      /// <summary>
      /// Database API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabase.Types.Schema.Types.Res database_schema(global::GrpcServer.CoreDatabase.Types.Schema.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return database_schema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Database API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabase.Types.Schema.Types.Res database_schema(global::GrpcServer.CoreDatabase.Types.Schema.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_database_schema, null, options, request);
      }
      /// <summary>
      /// Database API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabase.Types.Schema.Types.Res> database_schemaAsync(global::GrpcServer.CoreDatabase.Types.Schema.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return database_schemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Database API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabase.Types.Schema.Types.Res> database_schemaAsync(global::GrpcServer.CoreDatabase.Types.Schema.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_database_schema, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabase.Types.Delete.Types.Res database_delete(global::GrpcServer.CoreDatabase.Types.Delete.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return database_delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.CoreDatabase.Types.Delete.Types.Res database_delete(global::GrpcServer.CoreDatabase.Types.Delete.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_database_delete, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabase.Types.Delete.Types.Res> database_deleteAsync(global::GrpcServer.CoreDatabase.Types.Delete.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return database_deleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.CoreDatabase.Types.Delete.Types.Res> database_deleteAsync(global::GrpcServer.CoreDatabase.Types.Delete.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_database_delete, null, options, request);
      }
      /// <summary>
      /// Session API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.Session.Types.Open.Types.Res session_open(global::GrpcServer.Session.Types.Open.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return session_open(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Session API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.Session.Types.Open.Types.Res session_open(global::GrpcServer.Session.Types.Open.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_session_open, null, options, request);
      }
      /// <summary>
      /// Session API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.Session.Types.Open.Types.Res> session_openAsync(global::GrpcServer.Session.Types.Open.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return session_openAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Session API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.Session.Types.Open.Types.Res> session_openAsync(global::GrpcServer.Session.Types.Open.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_session_open, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.Session.Types.Close.Types.Res session_close(global::GrpcServer.Session.Types.Close.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return session_close(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.Session.Types.Close.Types.Res session_close(global::GrpcServer.Session.Types.Close.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_session_close, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.Session.Types.Close.Types.Res> session_closeAsync(global::GrpcServer.Session.Types.Close.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return session_closeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.Session.Types.Close.Types.Res> session_closeAsync(global::GrpcServer.Session.Types.Close.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_session_close, null, options, request);
      }
      /// <summary>
      /// Checks with the server that the session is still alive, and informs it that it should be kept alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.Session.Types.Pulse.Types.Res session_pulse(global::GrpcServer.Session.Types.Pulse.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return session_pulse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks with the server that the session is still alive, and informs it that it should be kept alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GrpcServer.Session.Types.Pulse.Types.Res session_pulse(global::GrpcServer.Session.Types.Pulse.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_session_pulse, null, options, request);
      }
      /// <summary>
      /// Checks with the server that the session is still alive, and informs it that it should be kept alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.Session.Types.Pulse.Types.Res> session_pulseAsync(global::GrpcServer.Session.Types.Pulse.Types.Req request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return session_pulseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks with the server that the session is still alive, and informs it that it should be kept alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.Session.Types.Pulse.Types.Res> session_pulseAsync(global::GrpcServer.Session.Types.Pulse.Types.Req request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_session_pulse, null, options, request);
      }
      /// <summary>
      /// Transaction Streaming API
      /// Opens a bi-directional stream representing a stateful transaction, streaming
      /// requests and responses back-and-forth. The first transaction client message must
      /// be {Transaction.Open.Req}. Closing the stream closes the transaction.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::GrpcServer.Transaction.Types.Client, global::GrpcServer.Transaction.Types.Server> transaction(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return transaction(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transaction Streaming API
      /// Opens a bi-directional stream representing a stateful transaction, streaming
      /// requests and responses back-and-forth. The first transaction client message must
      /// be {Transaction.Open.Req}. Closing the stream closes the transaction.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::GrpcServer.Transaction.Types.Client, global::GrpcServer.Transaction.Types.Server> transaction(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_transaction, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TypeDBClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TypeDBClient(configuration);
      }
    }

  }
}
#endregion
